import { GlobalConfig } from "../core/config.js";
import { colorText } from "../utils/colors.js";
export type { Runtime as AdapterType } from "../types/index.js";
import { httpStatusMap } from "../utils/httpStatusMap.js";
import { generateID, generateUUID } from "../utils/generateID.js";
import { allCookies, deleteCookie, getCookie, setCookie } from "../utils/cookie.js";
import { fileExists, fileSize, getFileBuffer, readStream } from "../utils/file.js";
import { extensionExtract, normalizeHeaderKey, sanitizePathSplit, sanitizePathSplitBasePath, sanitized } from "../utils/low-level.js";
import { Environment } from "../utils/runtime.js";
import { useFormData } from "../utils/formData.js";
export { useFormData, Environment, extensionExtract, normalizeHeaderKey, sanitizePathSplit, sanitizePathSplitBasePath, sanitized, allCookies, deleteCookie, getCookie, setCookie, fileExists, fileSize, getFileBuffer, readStream, generateID, generateUUID, httpStatusMap, colorText, GlobalConfig, };
declare const _default: {
    useFormData: typeof useFormData;
    Environment: typeof Environment;
    extensionExtract: typeof extensionExtract;
    normalizeHeaderKey: typeof normalizeHeaderKey;
    sanitizePathSplit: typeof sanitizePathSplit;
    sanitizePathSplitBasePath: typeof sanitizePathSplitBasePath;
    sanitized: typeof sanitized;
    allCookies: typeof allCookies;
    deleteCookie: typeof deleteCookie;
    getCookie: typeof getCookie;
    setCookie: typeof setCookie;
    fileExists: typeof fileExists;
    fileSize: typeof fileSize;
    getFileBuffer: typeof getFileBuffer;
    readStream: typeof readStream;
    generateID: typeof generateID;
    generateUUID: typeof generateUUID;
    httpStatusMap: Record<number, string>;
    colorText: typeof colorText;
    GlobalConfig: {
        new (): {};
        debugMode?: boolean;
        server: any;
        adapter: import("../types/index.js").Runtime;
        readonly debugging: {
            info: (msg: string, ...args: unknown[]) => void;
            warn: (msg: string, ...args: unknown[]) => void;
            error: (msg: string, ...args: unknown[]) => void;
            debug: (msg: string, ...args: unknown[]) => void;
            success: (msg: string, ...args: unknown[]) => void;
        };
    };
};
export default _default;
